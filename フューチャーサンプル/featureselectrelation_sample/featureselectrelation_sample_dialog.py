# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FeatureSelectRelationSampleDialog
                                 A QGIS plugin
 リレーションで選択
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-02-03
        git sha              : $Format:%H$
        copyright            : (C) 2020 by unemployed
        email                : chiakikungm@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

import qgis.core
from PyQt5.Qt import QSettings


# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'featureselectrelation_sample_dialog_base.ui'))


class FeatureSelectRelationSampleDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(FeatureSelectRelationSampleDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


    def pushCancel(self):
        self.close()


    def closeEvent(self, e):
        # 実行ボタン解除しないで終了した場合のため
        try:
            qgis.core.QgsProject.instance().relationManager().removeRelation(self.rel)
        except:
            pass
        try:
            self.parentLayer.selectionChanged.disconnect(self.showChildren)
        except:
            pass

        QSettings().setValue("/Qgis/attributeTableBehavior", self.oldsetting)
        self.close()


    def showEvent(self, e):
        # このプログラム実行中は属性テーブルは選択中のフューチャーしか表示しない
        self.oldsetting = QSettings().value("/Qgis/attributeTableBehaviour")
        QSettings().setValue("/Qgis/attributeTableBehavior", "ShowSelected")

        # レイヤのコンボボックス設定
        self.comboParentLayer.clear()
        self.comboChildLayer.clear()
        layers = qgis.core.QgsProject.instance().mapLayers().values()
        for layer in layers:
            if layer.type() != 0: continue;
            self.comboParentLayer.addItem(layer.name())
            self.comboChildLayer.addItem(layer.name())

        self.pushButton.setChecked(False)

    def changeParent(self, string):
        if self.comboParentLayer.currentText() == '': return
        self.parentLayer = qgis.core.QgsProject.instance().mapLayersByName(self.comboParentLayer.currentText())[0]

        self.comboParentField.clear()
        self.comboParentField.addItems( [field.name() for field in self.parentLayer.fields()] )


    def changeChild(self, string):
        if self.comboChildLayer.currentText() == '': return
        self.childLayer = qgis.core.QgsProject.instance().mapLayersByName(self.comboChildLayer.currentText())[0]

        self.comboChildField.clear()
        self.comboChildField.addItems( [field.name() for field in self.childLayer.fields()] )


    def pushExec(self, checked):

        if checked == True:
            qgis.utils.iface.actionSelect().trigger()

            # リレーションをここで張って...
            self.rel = qgis.core.QgsRelation()
            self.rel.setReferencingLayer(self.childLayer.id())
            self.rel.setReferencedLayer(self.parentLayer.id())
            self.rel.addFieldPair(self.comboChildField.currentText(), self.comboParentField.currentText())
            self.rel.setId('適当なID')
            self.rel.setName('適当な名前')
            qgis.core.QgsProject.instance().relationManager().addRelation(self.rel)

            self.parentLayer.selectionChanged.connect(self.showChildren)
            qgis.utils.iface.setActiveLayer(self.parentLayer)

        else:
            try: # 2回目以降に実行したとき、何故かここを通ってしまうので...
                qgis.utils.iface.actionSelect().setChecked(False)

                # リレーションを削除
                qgis.core.QgsProject.instance().relationManager().removeRelation(self.rel)

                self.parentLayer.selectionChanged.disconnect(self.showChildren)
            except:
                pass


    def showChildren(self):
        parent = self.rel.referencedLayer()
        child = self.rel.referencingLayer()

        features = parent.selectedFeatures()
        if len(features) == 0:
            print('フューチャーを選択してください')
            return

        child.removeSelection() # クリアしないと、属性テーブルに余計に表示されるから 
        for c in self.rel.getRelatedFeatures(features[0]):
            child.select(c.id())

        selectedlayer = qgis.utils.iface.activeLayer()
        try:
            qgis.utils.iface.setActiveLayer(child)
            qgis.utils.iface.mainWindow().findChild(QtWidgets.QAction, 'mActionOpenTable' ).trigger()
        finally:
            qgis.utils.iface.setActiveLayer(selectedlayer)
