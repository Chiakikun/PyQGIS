# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FeatureSelectExprSampleDialog
                                 A QGIS plugin
 フューチャーをクエリ式で選択します。
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-01-26
        git sha              : $Format:%H$
        copyright            : (C) 2020 by unemployed
        email                : chiakikungm@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

from qgis.PyQt.QtCore import QSettings
import qgis.core
import qgis.utils

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'featureselectexpr_sample_dialog_base.ui'))


class FeatureSelectExprSampleDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(FeatureSelectExprSampleDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

        self.iface = qgis.utils.iface

    def showEvent(self, e):
        self.execButton.setEnabled(False)
        self.saveButton.setEnabled(False)
        self.layer = self.iface.activeLayer()
        self.layer.removeSelection()

        self.fieldsBox.clear()
        for s in self.layer.fields():
            self.fieldsBox.addItem(s.name())

        self.oldsetting = QSettings().value("/Qgis/dockAttributeTable")


    def closeEvent(self, e):
        QSettings().setValue("/Qgis/dockAttributeTable", self.oldsetting)
        pass


    def cancelPush(self):
        self.close()


    def testPush(self):
        self.query = ''

        query = '"' + self.fieldsBox.currentText() + '" ' + self.queryEdit.text()

        features = self.layer.getFeatures(qgis.core.QgsFeatureRequest().setFilterExpression(query))
        if len(list(features)) == 0:
            return

        self.query = query
        QtWidgets.QMessageBox.information(None, '情報', 'エラーなし')
        self.execButton.setEnabled(True)
        self.saveButton.setEnabled(True)


    def queryChange(self):
        self.layer.removeSelection()
        self.execButton.setEnabled(False)
        self.saveButton.setEnabled(False)


    def execPush(self):
        QSettings().setValue("/Qgis/dockAttributeTable", True)
        self.layer.selectByExpression(self.query)
        self.iface.showAttributeTable(self.layer, self.query)

    def savePush(self):
        path, _ = QtWidgets.QFileDialog.getSaveFileName(None, "ファイルを保存します", "", "GeoPackage (*.gpkg)")
        if path:
            qgis.core.QgsVectorFileWriter.writeAsVectorFormat(self.layer, path, "System", onlySelected=True)
