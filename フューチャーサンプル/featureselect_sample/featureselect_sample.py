# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FeatureSelectSample
                                 A QGIS plugin
 フューチャーをマウス選択するサンプルです
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-01-26
        git sha              : $Format:%H$
        copyright            : (C) 2020 by unemployed
        email                : chiakikungm@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, Qt
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QMessageBox

# Initialize Qt resources from file resources.py
from .resources import *

import os.path

import qgis.core;
import qgis.gui;

class FeatureSelectSample:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'FeatureSelectSample_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.menu = self.tr(u'&FeatureSelect Sample')

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('FeatureSelectSample', message)


    def initGui(self):
        icon = QIcon(':/plugins/featureselect_sample/icon.png')
        self.action = QAction(icon, self.tr(u'フューチャー選択サンプル'), self.iface.mainWindow())
        self.action.triggered.connect(self.execSample)
        self.action.setEnabled(True)
        self.action.setCheckable(True)
        self.action.setEnabled(True)
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu(self.menu, self.action)
        
        # このサンプル実行中かな?
        self.isrun = False


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        self.iface.removePluginMenu(
            self.tr(u'&FeatureSelect Sample'),
            self.action)
        self.iface.removeToolBarIcon(self.action)


    def exitFunc(self):
        self.iface.layerTreeView().currentLayerChanged.disconnect(self.changeLayer)

        try:
            self.layer.selectionChanged.disconnect(self.editAttribute) 
        except Exception:
            pass
        
        self.iface.mapCanvas().setMapTool(self.previousMapTool)
        self.action.setChecked(False)
        self.isrun = False


    def execSample(self):
        if self.isrun:
            self.exitFunc()

        else:
            self.layer = self.iface.activeLayer()

            if (self.layer == None) or (type(self.layer) is not qgis._core.QgsVectorLayer):
                QMessageBox.about(None, '警告', 'ベクタレイヤを選択してから実行してください')
                self.action.setChecked(False)
                return

            self.iface.layerTreeView().currentLayerChanged.connect(self.changeLayer)
            self.iface.actionSelect().trigger()
            self.layer.selectionChanged.connect(self.editAttribute)
            self.previousMapTool = qgis.utils.iface.mapCanvas().mapTool()
            self.isrun = True

    def editAttribute(self):
        features = self.layer.selectedFeatures()

        if len(features) == 0:
            return

        if len(features) != 1:
            QMessageBox.information(None, '警告', 'フューチャーを1つ選択してください')
            return

        self.layer.startEditing()
        attdlg = self.iface.getFeatureForm(self.layer, features[0])
        attdlg.setMode(qgis.gui.QgsAttributeEditorContext.SingleEditMode)
        attdlg.finished.connect(self.commitEdit)
        attdlg.show()

    def commitEdit(self, result):
        if result == 1:
            self.layer.commitChanges()
        else:
            self.layer.rollBack()


    def changeLayer(self, layer):
        self.layer.removeSelection()

        if (layer == None) or (type(layer) is not qgis._core.QgsVectorLayer):
            self.exitFunc()
            return

        self.layer.selectionChanged.disconnect(self.editAttribute)

        self.layer = layer
        self.layer.selectionChanged.connect(self.editAttribute)

