# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FeatureSelectMultiLayersSample
                                 A QGIS plugin
 複数のベクタレイヤのフューチャーを選択するサンプル
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-02-20
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Chiakikun
        email                : chiakikungm@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, Qt
from qgis.PyQt.QtGui import QIcon, QColor
from qgis.PyQt.QtWidgets import QAction, QMessageBox

import os.path
import qgis.core

# Initialize Qt resources from file resources.py
from .resources import *

class FeatureSelectMultiLayersSample:

    def __init__(self, iface):

        # Save reference to the QGIS interface
        self.iface = iface
        self.canvas = self.iface.mapCanvas()
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)

        # プラグインの登録場所
        self.menu_pos = 'サンプル フューチャー選択'
        # キャンバス上のマウスイベント設定
        self.mouseEventSample = RectangleMapTool(self.iface.mapCanvas())


    def initGui(self):
        icon = QIcon(self.plugin_dir+'/icon.png')
        self.action = QAction(icon, '複数レイヤ一括選択', self.iface.mainWindow())
        self.action.triggered.connect(self.execSample) # アイコンを押下した時に実行されるメソッドを登録
        self.action.setCheckable(True)                 # Trueだとアイコンを押下したら次に押下するまで凹んだままになる。
        #self.iface.addToolBarIcon(self.action)         # ツールバーにアイコンを表示させたいなら#外して
        self.iface.addPluginToMenu(self.menu_pos, self.action)


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        self.iface.removePluginMenu(self.menu_pos, self.action)
        self.iface.removeToolBarIcon(self.action)


    def unsetTool(self, tool):
        if not isinstance(tool, FeatureSelectMultiLayersSample):
            self.canvas.mapToolSet.disconnect(self.unsetTool)
            self.iface.mapCanvas().unsetMapTool(self.mouseEventSample)
            self.action.setChecked(False)


    def execSample(self):
        if self.action.isChecked():
            self.previousMapTool = self.iface.mapCanvas().mapTool()
            self.iface.mapCanvas().setMapTool(self.mouseEventSample)
            self.canvas.mapToolSet.connect(self.unsetTool)
        else:
            self.canvas.mapToolSet.disconnect(self.unsetTool)
            self.iface.mapCanvas().unsetMapTool(self.mouseEventSample)
            self.iface.mapCanvas().setMapTool(self.previousMapTool)


class RectangleMapTool(qgis.gui.QgsMapToolEmitPoint):

    def __init__(self, canvas):
        self.canvas = canvas
        qgis.gui.QgsMapToolEmitPoint.__init__(self, self.canvas)
        self.rubberBand = qgis.gui.QgsRubberBand(self.canvas, True)
        self.rubberBand.setColor(QColor(255, 0, 0, 128))
        self.rubberBand.setWidth(1)
        self.reset()


    def reset(self):
        self.startPoint = self.endPoint = None
        self.isEmittingPoint = False
        self.rubberBand.reset(True)


    # 四角の書き始め
    def canvasPressEvent(self, e):
        self.startPoint = self.toMapCoordinates(e.pos())
        self.endPoint = self.startPoint
        self.isEmittingPoint = True
        self.showRect(self.startPoint, self.endPoint)


    # 四角の書き途中
    def canvasMoveEvent(self, e):
        if not self.isEmittingPoint:
            return

        self.endPoint = self.toMapCoordinates(e.pos())
        self.showRect(self.startPoint, self.endPoint)


    # 四角の書き終わり
    def canvasReleaseEvent(self, e):
        self.isEmittingPoint = False
        r = self.rectangle()
        if r is None:
            return
       
        layers = qgis.core.QgsProject.instance().mapLayers().values()
        for layer in layers:
            if type(layer) is not qgis.core.QgsVectorLayer: continue;

            layer.removeSelection()
            # 四角に交差するフューチャー取得
            intersects = []
            [intersects.append(f.id()) for f in layer.getFeatures(r)]
            layer.select(intersects)
        self.reset()


    def rectangle(self):
        if self.startPoint is None or self.endPoint is None:
            return None
        elif (self.startPoint.x() == self.endPoint.x() or self.startPoint.y() == self.endPoint.y()):
            return None

        return qgis.core.QgsRectangle(self.startPoint, self.endPoint)


    def showRect(self, startPoint, endPoint):
        self.rubberBand.reset(qgis.core.QgsWkbTypes.PolygonGeometry)
        if startPoint.x() == endPoint.x() or startPoint.y() == endPoint.y():
            return

        point1 = qgis.core.QgsPointXY(startPoint.x(), startPoint.y())
        point2 = qgis.core.QgsPointXY(startPoint.x(), endPoint.y())
        point3 = qgis.core.QgsPointXY(endPoint.x(), endPoint.y())
        point4 = qgis.core.QgsPointXY(endPoint.x(), startPoint.y())

        # cookbookだとpoint1～3のdoUpdateがFalseになっているのは何でだろう？？refreshに影響ある？
        self.rubberBand.addPoint(point1)
        self.rubberBand.addPoint(point2)
        self.rubberBand.addPoint(point3)
        self.rubberBand.addPoint(point4)
        self.rubberBand.show()


    def deactivate(self):
        qgis.gui.QgsMapTool.deactivate(self)
        self.deactivated.emit()