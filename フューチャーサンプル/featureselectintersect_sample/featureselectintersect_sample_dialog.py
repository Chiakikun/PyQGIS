# -*- coding: utf-8 -*-
"""
/***************************************************************************
 FeatureSelectIntersectSampleDialog
                                 A QGIS plugin
 選択したフューチャーと交差するフューチャーを選択するサンプル
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-02-11
        git sha              : $Format:%H$
        copyright            : (C) 2020 by unemployed
        email                : chiakikungm@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets

import qgis.core
import qgis.utils
from qgis.PyQt.QtWidgets import QMessageBox

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'featureselectintersect_sample_dialog_base.ui'))


class FeatureSelectIntersectSampleDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(FeatureSelectIntersectSampleDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)


    def pushCancel(self):
        self.close()


    def showEvent(self, e):
        self.comboSelectLayer.clear()
        self.comboTargetLayer.clear()
        layers = qgis.core.QgsProject.instance().mapLayers().values()
        for layer in layers:
            if layer.type() != 0: continue;
            self.comboSelectLayer.addItem(layer.name())
            self.comboTargetLayer.addItem(layer.name())


    def changeSelect(self, string):
        preactive = qgis.utils.iface.activeLayer()
        try:
            self.selectLayer = qgis.core.QgsProject.instance().mapLayersByName(self.comboSelectLayer.currentText())[0]
            qgis.utils.iface.setActiveLayer(self.selectLayer)
            qgis.utils.iface.zoomToActiveLayer() 	
        finally:
            qgis.utils.iface.setActiveLayer(preactive)


    def changeTarget(self, string):
        self.targetLayer = qgis.core.QgsProject.instance().mapLayersByName(self.comboTargetLayer.currentText())[0]
        qgis.utils.iface.setActiveLayer(self.targetLayer)


    def pushExec(self):
        if self.comboSelectLayer.currentText() == self.comboTargetLayer.currentText():
            QMessageBox.about(None, '警告', '同じベクタレイヤを選択しないでください')
            return

        features = self.targetLayer.selectedFeatures()
        if len(features) == 0:
            print('フューチャーを選択してください')
            return
  
        areas = []
        inGeom = features[0].geometry()
        cands = self.selectLayer.getFeatures(qgis.core.QgsFeatureRequest().setFilterRect(inGeom.boundingBox()))
        for sf in cands:
            if inGeom.intersects(sf.geometry()):
                areas.append(sf.id())

        self.selectLayer.select(areas)

        res = qgis.core.QgsVectorFileWriter.writeAsVectorFormat(self.selectLayer, 'd:\\' + self.selectLayer.name() + '.shp', 'System', self.selectLayer.crs(), 'ESRI Shapefile', True)