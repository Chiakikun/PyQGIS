# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ScreenShotSample3Dialog
                                 A QGIS plugin
 ラスタレイヤ毎にスクリーンショット
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-02-04
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Chiakikun
        email                : chiakikungm@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt import QtCore
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from PyQt5.Qt import pyqtSignal

import os
import qgis.core

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'screenshot_sample3_dialog_base.ui'))

MULTISELECT_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'multiselect_dialog.ui'))


class ScreenShotSample3Dialog(QtWidgets.QDialog, FORM_CLASS):

    def __init__(self, parent=None):
        super(ScreenShotSample3Dialog, self).__init__(parent)
        self.setupUi(self)

        self.iface = qgis.utils.iface
        self.canvas = self.iface.mapCanvas()


    def clickCloseButton(self):
        self.close()


    def showEvent(self, e):
        self.selectedLayers = []


    def onSelectedUpdate(self, selectedLayers):
        self.selectedLayers = selectedLayers

        msg = str(len(self.selectedLayers)) + '個の要素が選択されました。'
        self.selectedLayerNum.setText(msg)


    def clickSelectLayerButton(self):
        self.multiselect_dialog = MultiSelectDialog(self)
        self.multiselect_dialog.setModal(True)
        self.multiselect_dialog.update.connect(self.onSelectedUpdate)

        self.multiselect_dialog.setModal(True)
        self.multiselect_dialog.show()


    def exportMap(self):
        qgis.utils.iface.setActiveLayer(self.layer)
        qgis.utils.iface.mapCanvas().saveAsImage('d:/' + self.iface.activeLayer().name() + '.png')

        if len(self.selectedLayers) > self.count:
            self.setNextFeatureExtent()
        else:
            qgis.utils.iface.mapCanvas().mapCanvasRefreshed.disconnect( self.exportMap )
            self.close()


    def setNextFeatureExtent(self):
        self.layer = qgis.core.QgsProject.instance().mapLayersByName(self.selectedLayers[self.count])[0]
        qgis.utils.iface.setActiveLayer(self.layer)
        qgis.utils.iface.zoomToActiveLayer() 	

        self.count += 1


    def clickExecButton(self):
        if len(self.selectedLayers) == 0: return

        self.count = 0    
        qgis.utils.iface.mapCanvas().mapCanvasRefreshed.connect( self.exportMap )
        self.setNextFeatureExtent()

        self.close()


class MultiSelectDialog(QtWidgets.QDialog, MULTISELECT_CLASS):
    update = pyqtSignal(list)


    def __init__(self, parent=None):
        super(MultiSelectDialog, self).__init__(parent)
        self.setupUi(self)
        self.initTable()


    def clickSelectAllButton(self):
        for i in range(0, self.tableWidget.rowCount()):
            self.tableWidget.cellWidget(i, 0).setCheckState(2)


    def clickClearButton(self):
        for i in range(0, self.tableWidget.rowCount()):
            self.tableWidget.cellWidget(i, 0).setCheckState(0)


    def clickOKButton(self):
        self.update.emit(self.getSelectedLayerNames())
        self.close()


    def clickCancelButton(self):
        self.close()


    def initTable(self):
        # ラスタ（タイルは除く）レイヤ名を取得する
        names = []
        layers = qgis.core.QgsProject.instance().mapLayers().values()
        for layer in layers:
            if type(layer) != qgis.core.QgsRasterLayer: continue
            if layer.providerType() == 'wms': continue
            names.append(layer.name())

        # テーブルの行、列を設定する
        self.tableWidget.setRowCount(len(names));
        self.tableWidget.setColumnCount(2);   
        self.tableWidget.setHorizontalHeaderItem(0, QtWidgets.QTableWidgetItem('チェック'))
        self.tableWidget.setHorizontalHeaderItem(1, QtWidgets.QTableWidgetItem('レイヤ名'))

        # テーブルアイテム設定
        self.check_box = []
        for i in range(0, len(names)):
            # テーブルの1列目にチェックボックスを設定する
            self.check_box.append(QtWidgets.QCheckBox(parent=self.tableWidget))
            self.tableWidget.setCellWidget(i, 0, self.check_box[i])
            # テーブルの2列目にレイヤ名を設定する
            self.tableWidget.setItem(i, 1, QtWidgets.QTableWidgetItem(names[i]) )


    def getSelectedLayerNames(self):
        return [self.tableWidget.item(i, 1).text() for i in range(0, self.tableWidget.rowCount()) if self.tableWidget.cellWidget(i, 0).checkState() == 2]